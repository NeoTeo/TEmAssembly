^10 @console/vector
^12 @console/read
^18 @console/write

^28 @screen/xposition
^2A @screen/yposition
^2E @screen/color

^42 @curcol 0
^43 @currow 0

^50 @char/4
00 00 08 18 28 3C 08 00
^58 @char/2
00 00 38 04 18 20 3C 00 

^80 @hejverden 48 65 6A 20 76 65 72 64 65 6E 0D

^B0 @IME 01 ( enable interrupts )

^100

( a character is 8 x 8 bits )
@main
	#@convec _@console/vector bsoS ( set the console interrupt vector ) 
	( #2 #0005 #0010 #@char/4 $@charline jsr )
	( #2 #0005 #0011 #@char/2 $@charline jsr ) 
	( $@console jsr )
	brk

( console input interrupt handler )
@convec
	#2 #0 #@currow lda #0 #@curcol lda
	_@console/read bsi 
	$@fontoffset jsr #@font/monomini addS
	$@charline jsr

	#@curcol lda #1 add ( increment column )
	dup #@curcol sta 	( redundant, load currow and curcol as single short and swap as needed )
	#50 lst $@convec_done jnz
	#0 #@curcol sta		( reset col )
	#@currow lda #1 add ( increment row )
	dup #@currow sta	( redundant, load currow and curcol as single short and swap as needed )
	#3C lst $@convec_done jnz
	#0 #@currow sta		( reset row )
	@convec_done
	
	#1 #@IME sta (re-enable interrupts )
	
jmpSR

@fontoffset ( ascii -- offset )
	#0 swp	( turn byte into short )
	#30 shiS		
jmpSR

@console
	#0 
	@console_loop
		dup #@hejverden rot add lda	
		dup #0 equ $@console_done jnz 
		_@console/write bso
		#1 add
		$@console_loop jmp 
	@console_done
jmpSR


@colrowtoxy ( colS row -- x y ) ( all shorts )
	( screen resolution is 640x480. Each cell in grid is 8x8. So x is 8*col and y is 8*row )
	#30 shiS swpS
	#30 shiS
	jmpSR

@charline ( cidx row col addr -- ) ( b s s s )
	stsS 				( addr to rstack )  
	#0 sts				( y counter to rstack )
	$@colrowtoxy jsr	( convert row and col to xy ) 
	@cl_yloop			( y coords loop )
		#0 stsRC rotR rotR stsSRC rotR 
		addS
		lda				( load byte at data address )
		#80 			( start from msbit ) 
		@cl_xloop
			stsSC 					( copy byte data and mask to rstack )
			and	#0 equ 				( check for pixel )
			$@cl_xloop_skip jnz		( skip if no pixel )	
			$@dup5 jsr
			$@dot jsr
			@cl_xloop_skip
			swpS #01 add swpS		( swap x and y, increment x, swap back again ) 
			stsSR 					( move byte data and mask back from rstack )
			#01 shi					( shift mask bit down one )	
			dup #0 grt 
			$@cl_xloop jnz			( repeat as long as the mask is not zero )
		popS			( drop unused byte data and mask for this scanline ) 
		#1 add 
		swpS
		#8 sub
		swpS
		stsR		( get y count from rstack )
		#1 add stsC		( increment y count and copy to rstack )
		#8 lst $@cl_yloop jnz	
		
		( find way to avoid leaving cruft on stack )
		popRS popR		( pop the addr off the return stack )
		popS popS pop	( clear stack of coords and color )
jmpSR

( p: 2 0 2 0 0 40 20 ) ( r: 0 50 )

( this is a code smell that i'm juggling too many parms. Refactor! ) 
@dup5 ( abcde -- abcdeabcde )
	#5 $@pick jsr
	#5 $@pick jsr
	#5 $@pick jsr
	#5 $@pick jsr
	#5 $@pick jsr
	
jmpSR

( picks the value at the given position in the stack and leaves it on top of the stack )
@pick ( n -- n )
	stsC
	@pick_wind
		dup #0 equ $@pick_unwind jnz
		#1 sub swp sts swpR $@pick_wind jmp

	@pick_unwind
		pop ovrR swpR stsSR #1 sub 
		@pick_unwind_unw
			dup #0 equ $@pick_end jnz
			#1 sub swpR stsR swp $@pick_unwind_unw jmp

	@pick_end
	pop
	stsR
jmpSR

@dot ( col x y -- )
	_@screen/yposition bsoS
	_@screen/xposition bsoS 
	_@screen/color bso	 
jmpSR

(chars are at 0x400 + ascii*8 )
^400 @font/monomini
( unprintable ascii from 0x400 to 0x41F )
^500 
00 00 00 00 00 00 00 00 ( space )
^580
00 18 24 24 24 18 00 00 ( 0 )
00 18 08 08 08 08 00 00 ( 1 )
00 38 04 18 20 3C 00 00 ( 2 )
00 38 04 18 04 38 00 00 ( 3 )
00 08 18 28 3C 08 00 00 ( 4 )
00 3C 20 38 04 38 00 00 ( 5 )
00 18 20 38 24 18 00 00 ( 6 )
00 3C 04 08 10 10 00 00 ( 7 )
00 18 24 18 24 18 00 00 ( 8 )
00 18 24 1C 04 18 00 00 ( 9 )
^708 (lower case letters )
00 00 1C 24 24 1C 00 00 ( a )
00 20 38 24 24 38 00 00 ( b )
00 00 18 20 20 18 00 00 ( c )
00 04 1C 24 24 1C 00 00 ( d )
00 00 18 2C 30 18 00 00 ( e )
00 08 10 38 10 10 00 00 ( f )
00 00 1C 24 24 1C 04 18 ( g )
00 20 20 30 28 28 00 00 ( h )
00 10 00 10 10 10 00 00 ( i )
00 10 00 10 10 10 20 00 ( j )
00 20 20 28 30 28 00 00 ( k )
00 10 10 10 10 08 00 00 ( l )
00 00 3C 2A 2A 2A 00 00 ( m )
00 00 38 24 24 24 00 00 ( n )
00 00 18 24 24 18 00 00 ( o )
00 00 38 24 24 38 20 20 ( p )
00 00 1C 24 24 1C 04 04 ( q )
00 00 28 30 20 20 00 00 ( r )
00 00 1C 30 0C 38 00 00 ( s )
00 10 1C 10 10 08 00 00 ( t )
00 00 24 24 24 1C 00 00 ( u )
00 00 24 24 28 10 00 00 ( v )
00 00 54 54 28 28 00 00 ( w )
00 00 24 18 18 24 00 00 ( x )
00 00 24 24 24 1C 04 18 ( y )
00 00 3C 08 10 3C 00 00 ( z )
