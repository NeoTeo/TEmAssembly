^10 @console/vector
^12 @console/read
^18 @console/write

^28 @screen/xposition
^2A @screen/yposition
^2C @screen/addr
^2E @screen/clut
^2F @screen/mmu

^42 @curcol 0
^43 @currow 0

^50 @char/4
00 00 08 18 28 3C 08 00
^58 @char/2
00 00 38 04 18 20 3C 00 

^90 @hejverden 48 65 6A 20 76 65 72 64 65 6E 0D

^B0 @IME 01 ( enable interrupts )

^C0 @keybufptr 0 
^C1 @keybuf_count 0
^C2 @keybuf_max 20 
^C3 @keybuf ( keybuf_max * byte keyboard buffer )


^100 ( start of executable code )

( a character is 8 x 8 bits )
@main
	#@convec _@console/vector bsoS ( set the console interrupt vector ) 

	( infinite loop )
	@main_toploop
		( check the keybuf_count being > 0 )
		#@keybuf_count lda #0 equ $@main_skip_keybuf jnz
		$@pop_keybuf jsr 
		#@drawchar2 jsrS 
		( #@drawchar jsrS )
		@main_skip_keybuf
	$@main_toploop jmp
	brk

( console input interrupt handler )
@convec
	_@console/read bsi	
	
	$@push_keybuf jsr	
	#1 #@IME sta (re-enable interrupts )
jmpSR

( byte only, range is 0 to max-1 )
@inc_ring ( cur max -- )
	swp #1 add dup rot lst $@inc_ring_skip jnz
	pop #0
	@inc_ring_skip	
jmpSR

@dec_ring ( cur max -- )
	swp #1 sub dupS grt $@dec_ring_skip jnz
	swp #1 sub		
	@dec_ring_skip	
	swp pop
jmpSR

@push_keybuf ( val -- )

	#@keybuf #@keybufptr lda stsC ( load the keybuf pointer value and copy to rStack )
	add ( offset keybuf by pointer )
	sta ( store key in keybuf )

	stsR #@keybuf_max lda $@inc_ring jsr	( debug small buf )

	#@keybufptr sta ( store the incremented pointer )

	( circular buffer maxes out at #20 )
	#@keybuf_count lda 
	#@keybuf_max lda $@gre jsr $@push_keybuf_skip jnz
	#@keybuf_count lda #1 add 
	#@keybuf_count sta
	@push_keybuf_skip
jmpSR

@gre ( n n - result )
	dupS lst $@gre_eqskip jnz
	equ $@gre_end jmp
	@gre_eqskip
	popS #0
	@gre_end
jmpSR

@pop_keybuf ( -- char )
	#@keybuf_count lda dup #0 equ $@pop_keybuf_skip jnz 
	#1 sub #@keybuf_count sta

	#@keybuf 
	( keybufptr points to the next free pos so decrement first )
	#@keybufptr lda #@keybuf_max lda $@dec_ring jsr
	dup #@keybufptr sta 			( store the pointer )
	add 							( offset keybuf by pointer )
	lda								( load the value at the offset onto pStack ) 
	$@pop_keybuf_end jmp ( gross )	
	@pop_keybuf_skip
	pop
	@pop_keybuf_end
jmpSR

@drawchar2
	sts	( put the char onto the rStack )
	#0 #@currow lda #0 #@curcol lda		( short row and col )
	#@colrowtoxy jsrS	( convert row and col to xy ) 
	_@screen/yposition bsoS
	_@screen/xposition bsoS

	stsR ( move char from rStack )		( ascii char value )
	#@fontoffset jsrS #@font/monomini addS
	_@screen/addr bsoS

	#1 _@screen/mmu bso

	( independent section to increment the columns and rows as charactes are printed. Move to own procedure. )
	#@curcol lda #1 add ( increment column )
	dup #@curcol sta 	( redundant, load currow and curcol as single short and swap as needed )
	#50 lst $@drawchar2_done jnz
	#0 #@curcol sta		( reset col )
	#@currow lda #1 add ( increment row )
	dup #@currow sta	( redundant, load currow and curcol as single short and swap as needed )
	#3C lst $@drawchar2_done jnz
	#0 #@currow sta		( reset row )
	@drawchar2_done
jmpSR

@drawchar
	sts	( put the char onto the rStack )
	#2  ( clut index )
	#0 #@currow lda #0 #@curcol lda		( short row and col )
	stsR ( move char from rStack )		( ascii char value )
	( _@console/read bsi )
	$@fontoffset jsr #@font/monomini addS
	$@charline jsr

	#@curcol lda #1 add ( increment column )
	dup #@curcol sta 	( redundant, load currow and curcol as single short and swap as needed )
	#50 lst $@convec_done jnz
	#0 #@curcol sta		( reset col )
	#@currow lda #1 add ( increment row )
	dup #@currow sta	( redundant, load currow and curcol as single short and swap as needed )
	#3C lst $@convec_done jnz
	#0 #@currow sta		( reset row )
	@convec_done
	
jmpSR


@fontoffset ( ascii -- offset )
	#0 swp	( turn byte into short )
	#30 shiS		
jmpSR

@console
	#0 
	@console_loop
		dup #@hejverden rot add lda	
		dup #0 equ $@console_done jnz 
		_@console/write bso
		#1 add
		$@console_loop jmp 
	@console_done
jmpSR


@colrowtoxy ( colS row -- x y ) ( all shorts )
	( screen resolution is 640x480. Each cell in grid is 8x8. So x is 8*col and y is 8*row )
	#30 shiS swpS
	#30 shiS
	jmpSR

@charline ( cidx row col addr -- ) ( b s s s )
	stsS 				( addr to rstack )  
	#0 sts				( y counter to rstack )
	$@colrowtoxy jsr	( convert row and col to xy ) 
	@cl_yloop			( y coords loop )
		#0 stsRC rotR rotR stsSRC rotR 
		addS
		lda				( load byte at data address )
		#80 			( start from msbit ) 
		@cl_xloop
			stsSC 					( copy byte data and mask to rstack )
			and	#0 equ 				( check for pixel )
			$@cl_xloop_skip jnz		( skip if no pixel )	
			$@dup5 jsr
			$@dot jsr
			@cl_xloop_skip
			swpS #01 add swpS		( swap x and y, increment x, swap back again ) 
			stsSR 					( move byte data and mask back from rstack )
			#01 shi					( shift mask bit down one )	
			dup #0 grt 
			$@cl_xloop jnz			( repeat as long as the mask is not zero )
		popS			( drop unused byte data and mask for this scanline ) 
		#1 add 
		swpS
		#8 sub
		swpS
		stsR		( get y count from rstack )
		#1 add stsC		( increment y count and copy to rstack )
		#8 lst $@cl_yloop jnz	
		
		( find way to avoid leaving cruft on stack )
		popRS popR		( pop the addr off the return stack )
		popS popS pop	( clear stack of coords and color )
jmpSR

( p: 2 0 2 0 0 40 20 ) ( r: 0 50 )

( this is a code smell that i'm juggling too many parms. Refactor! ) 
@dup5 ( abcde -- abcdeabcde )
	#5 $@pick jsr
	#5 $@pick jsr
	#5 $@pick jsr
	#5 $@pick jsr
	#5 $@pick jsr
	
jmpSR

( picks the value at the given position in the stack and leaves it on top of the stack )
@pick ( n -- n )
	stsC
	@pick_wind
		dup #0 equ $@pick_unwind jnz
		#1 sub swp sts swpR $@pick_wind jmp

	@pick_unwind
		pop ovrR swpR stsSR #1 sub 
		@pick_unwind_unw
			dup #0 equ $@pick_end jnz
			#1 sub swpR stsR swp $@pick_unwind_unw jmp

	@pick_end
	pop
	stsR
jmpSR

@dot ( col x y -- )
	_@screen/yposition bsoS
	_@screen/xposition bsoS 
	_@screen/clut bso	 
jmpSR

(chars are at 0x400 + ascii*8 )
^400 @font/monomini
( unprintable ascii from 0x400 to 0x41F )
^500 
00 00 00 00 00 00 00 00 ( space )
00 10 10 10 00 10 00 00 ( ! )
00 12 24 00 00 00 00 00 ( " )
00 28 7C 28 7C 28 00 00 ( # )
00 08 1C 30 0C 38 08 00 ( $ )
00 48 08 10 20 24 00 00 ( % )
00 30 40 34 48 34 00 00 ( & )
00 20 20 00 00 00 00 00 ( ' )
00 10 20 20 20 10 00 00 ( open parens )
00 20 10 10 10 20 00 00 ( close parens )
00 00 28 10 28 00 00 00 ( * )
00 00 10 38 10 00 00 00 ( + )
00 00 00 00 00 10 20 00 ( , )
00 00 00 38 00 00 00 00 ( - )
00 00 00 00 00 10 00 00 ( . )
00 02 04 08 10 20 00 00 ( / )
00 18 24 24 24 18 00 00 ( 0 )
00 18 08 08 08 08 00 00 ( 1 )
00 38 04 18 20 3C 00 00 ( 2 )
00 38 04 18 04 38 00 00 ( 3 )
00 08 18 28 3C 08 00 00 ( 4 )
00 3C 20 38 04 38 00 00 ( 5 )
00 18 20 38 24 18 00 00 ( 6 )
00 3C 04 08 10 10 00 00 ( 7 )
00 18 24 18 24 18 00 00 ( 8 )
00 18 24 1C 04 18 00 00 ( 9 )
00 00 00 10 00 10 00 00 ( : )
00 00 00 10 00 10 20 00 ( ; )
00 08 10 20 10 08 00 00 ( < )
00 00 38 00 38 00 00 00 ( = )
00 20 10 08 10 20 00 00 ( > )
00 38 04 38 00 20 00 00 ( ? )
00 38 44 5C 54 38 00 00 ( @ )
00 18 24 24 3C 24 00 00 ( A )
00 38 24 38 24 38 00 00 ( B )
00 18 20 20 20 18 00 00 ( C )
00 38 24 24 24 38 00 00 ( D )
00 38 20 38 20 38 00 00 ( E )
00 38 20 38 20 20 00 00 ( F )
00 1C 20 2C 24 1C 00 00 ( G )
00 24 24 3C 24 24 00 00 ( H )
00 38 10 10 10 38 00 00 ( I )
00 0C 04 04 24 18 00 00 ( J )
00 24 28 30 28 24 00 00 ( K )
00 20 20 20 20 38 00 00 ( L )
00 22 36 2A 22 20 00 00 ( M )
00 24 34 2C 24 24 00 00 ( N )
00 18 24 24 24 18 00 00 ( O )
00 38 24 24 38 20 00 00 ( P )
00 18 24 24 28 14 00 00 ( Q )
00 3C 24 24 38 24 00 00 ( R )
00 1C 20 18 04 38 00 00 ( S )
00 38 10 10 10 10 00 00 ( T )
00 24 24 24 24 18 00 00 ( U )
00 24 24 24 28 30 00 00 ( V )
00 44 54 54 54 28 00 00 ( W )
00 24 24 18 24 24 00 00 ( X )
00 24 24 3C 04 18 00 00 ( Y )
00 3C 04 18 20 3C 00 00 ( Z )
00 30 20 20 20 30 00 00 ( [ )
00 20 10 08 04 02 00 00 ( \ )
00 30 10 10 10 30 00 00 ( ] )
00 10 28 00 00 00 00 00 ( ^ )
00 00 00 00 00 3C 00 00 ( _ )
00 20 10 00 00 00 00 00 ( ` )
00 00 1C 24 24 1C 00 00 ( a )
00 20 38 24 24 38 00 00 ( b )
00 00 18 20 20 18 00 00 ( c )
00 04 1C 24 24 1C 00 00 ( d )
00 00 18 2C 30 18 00 00 ( e )
00 08 10 38 10 10 00 00 ( f )
00 00 1C 24 24 1C 04 18 ( g )
00 20 20 30 28 28 00 00 ( h )
00 10 00 10 10 10 00 00 ( i )
00 10 00 10 10 10 20 00 ( j )
00 20 20 28 30 28 00 00 ( k )
00 10 10 10 10 08 00 00 ( l )
00 00 3C 2A 2A 2A 00 00 ( m )
00 00 38 24 24 24 00 00 ( n )
00 00 18 24 24 18 00 00 ( o )
00 00 38 24 24 38 20 20 ( p )
00 00 1C 24 24 1C 04 04 ( q )
00 00 28 30 20 20 00 00 ( r )
00 00 1C 30 0C 38 00 00 ( s )
00 10 1C 10 10 08 00 00 ( t )
00 00 24 24 24 1C 00 00 ( u )
00 00 24 24 28 10 00 00 ( v )
00 00 54 54 28 28 00 00 ( w )
00 00 24 18 18 24 00 00 ( x )
00 00 24 24 24 1C 04 18 ( y )
00 00 3C 08 10 3C 00 00 ( z )
00 18 10 20 10 18 00 00 ( { )
00 10 10 10 10 10 00 00 ( | )
00 30 10 08 10 30 00 00 ( } )
00 14 28 00 00 00 00 00 ( ~ )
