^10 @console/vector
^12 @console/read
^18 @console/write

^28 @screen/xposition
^2A @screen/yposition
^2C @screen/addr
^2E @screen/clut
^2F @screen/dma

^90 @mouse/vector &2 @mouse/x &2 @mouse/y &2 @mouse/bstate

^B0 @IME 01 ( enable interrupts )

^C0 @keybufptr 0  ( always points to an available position )
^C1 @keybuf_count 0
^C2 @keybuf_max 14 
^C3 @keybuf &14 ( keybuf_max * byte keyboard buffer )

^E3 @cposbuf_offset 0	( always points to an available position )
^E4 @cposbuf_count 0
^E5 @cposbuf_max 5
^E6 @cposbuf_prevposx &2 @cposbuf_prevposy &2
^EA @cposbuf &14 ( each cursor position is 4 bytes; xS yS, so its size is cposbuf_max * 4 = 0x14 )

( macro definitions )
%>= { lst #0 equ } 

( a less-than that interprets values as signed )
%<?S { subS #8000 andS #8000 equS }

( a greater-than that interprets values as signed )
%>?S { subS #0001 <?S #0 equ }

( useful for turning two bytes into two shorts if c and d are 0 )
%prezip { swp swpS rot rot swpS } ( a b c d -- c a d b )

%2dupS { ovrS ovrS } ( aS bS -- aS bS aS bS ) 

%isnegS { #8000 andS #8000 equS } ( aS bS -- result ) 

%setpixel { _screen/yposition bsoS _screen/xposition bsoS _screen/clut bso } ( col xS yS -- )

%fontoffset { #0 swp ( turn byte into short ) #30 shiS }

%lmbdown { _mouse/bstate bsi #10 and #10 equ }

( convert row and col to xy ) 
( screen resolution is 640x480. Each cell in grid is 8x8. So x is 8*col and y is 8*row )
%rowcoltoxy { #0 #0 prezip #30 shiS swpS  #30 shiS } ( col row -- x y ) ( bb -- ss )

( start of executable code )
^100 

( a character is 8 x 8 bits )
@main
	;convec _console/vector bsoS ( set the console interrupt vector ) 
	;mousevec _mouse/vector bsoS ( set the mouse interrupt vector ) 
	#0000	( row and col inited )
	( infinite loop )
	.toploop
	
		;handle_mousebuf jsrS

		;handle_keybuf jsrS

	;.toploop jmpS
	brk

@handle_mousebuf ( -- )
	;cposbuf_count lda #0 equ $.cposbuf_end jnz
	;pop_cposbuf jsrS 

	2dupS ;pointer_draw jsrS 

	lmbdown #0 equ $.skip_linedraw jnz

	2dupS ;cline jsrS 

	.skip_linedraw 

	;cposbuf_prevposy staS	;cposbuf_prevposx staS	
	.cposbuf_end
jmpSR


@handle_keybuf ( row col -- )

		( check the keybuf_count being > 0 ) 
		;keybuf_count lda #0 equ ;.skip jnzS

		;pop_keybuf jsrS
		
		dup #7F equ $.doctrl jnz					( check for delete character )
		dup #20 lst $.doctrl jnz					( check for other control characters )

		sts dupS stsR											( duplicate the row and col behind char )
		;drawchar jsrS 
		
		#1 ;advancecursor jsrS									( increment the columns and rows as characters are printed. )

		jmpSR	

		( handle control characters )
		.doctrl

		dup #7F neq $.skip_delete jnz
		pop ( remove extra unneeded char copy )
		( move back and draw a space )	

		#FF ;advancecursor jsrS

		dupS #20 ;drawchar jsrS
		jmpSR	

		.skip_delete
		
		dup #0D neq $.skip_enter jnz
		pop ( remove extra unneeded char copy )
		( set col to end and advance, which causes it to move to the next line. )
		pop #4F 
		#1 $advancecursor jsr
		jmpSR	

		.skip_enter

		#1B neq $.skip_esc jnz

		;dugo jsrS
		.skip_esc 

		.skip
jmpSR

( Absolute value of short on stack - interpreted as signed - by two's complement ) 
@absS ( valS -- absvalS )
	dupS #0F shiS #0000 equS $.skip jnz			( only convert if valS < 0 )
	#FFFF xorS #1 add							( two's complement; flip bits and add 1 )
	.skip
jmpSR

@advancecursor ( row col stepval -- newrow newcol )
	sts #50 swp stsCR $step jsr 
	#0 equ $.skip_vstep jnz 
	swp #3C swp stsCR $step jsr pop swp
	.skip_vstep
	popR
jmpSR

( step cursor by stepval signed and leave new col and 0xff if the column was reset )
@step ( maxcols col stepval -- newcol didreset )
	add dupS swp lst $.norm jnz
	dupS equ $.over jnz
	swp #1 sub swp jmpSR ( understepped )
	.over popS #0 #FF jmpSR 
	.norm swp	pop #0
jmpSR

( leave smallest of the two values on stack )
@minS ( aS bS -- rS )
	2dupS <?S $.skipswap jnz
	swpS
	.skipswap 
	popS
jmpSR

@maxS ( aS bS -- rS )
	2dupS <?S #0 equ $.skipswap jnz
	swpS
	.skipswap 
	popS
jmpSR

@drawpointer ( xposS yposS -- )
	swpS
	#0000 ;maxS jsrS
	swpS
	#0000 ;maxS jsrS

	;pointer/x ldaS
	;pointer/y ldaS

	_screen/yposition bsoS
	_screen/xposition bsoS
	;pointer/clear
	_screen/addr bsoS			( set dma address )
	#41 _screen/dma bso			( start dma transfer of 64 bits to fg: bit 1, to foreground layer: bit 7 )
	2dupS 						( duplicate the new position )
	;pointer/y staS
	;pointer/x staS

	_screen/yposition bsoS
	_screen/xposition bsoS
	 ;pointer/xhair 
	_screen/addr bsoS			( set dma address )
	#41 _screen/dma bso			( start dma transfer of 64 bits to fg: bit 1, to foreground layer: bit 7 )
jmpSR

@drawchar ( row col char -- )
	rot rot
	rowcoltoxy
	_screen/yposition bsoS
	_screen/xposition bsoS

	fontoffset ;font/monomini addS
	_screen/addr bsoS

	#1 _screen/dma bso		( start dma transfer of 64 bits from addr )
jmpSR

( mouse input interrupt handler )
( should just put mouse events into buffer )
@mousevec

	_mouse/x bsiS _mouse/y bsiS ;push_cposbuf jsrS 

	#1 ;IME sta (re-enable interrupts )
jmpSR

@pointer_draw ( xS yS -- )
	#0003 subS swpS 	( offset pointer image by 3 in x and y so its center is at the mouse position )
	#0003 subS swpS
	;drawpointer jsrS
jmpSR

( compare new point with previous point and, if not adjacent, draw a line between them )
@cline ( xS yS -- )
																						( p: row col xS yS ) 
	2dupS												( make copy for consuming )
	;cposbuf_prevposx ldaS ;cposbuf_prevposy ldaS		( load the previous position )
																						( p: row col xS yS xS yS pxS pyS ) 
	rotS subS ;absS jsrS 
																						( p: row col xS yS xS pxS adyS ) 
	#0001 grtS $.connect_points1 jnz					( check delta y <= 1 )
																						( p: row col xS yS xS pxS ) 
	subS ;absS jsrS
																						( p: row col xS yS adxS ) 
	#0001 grtS $.connect_points jnz						( check delta x <= 1 )
																						( p: row col xS yS ) 
	#0002 rotS rotS ( place a clut value in front of coords )

																						( p: row col clutS xS yS ) 
	setpixel 
	pop				( pop unused byte of clut )
																						( p: row col ) 
	jmpSR			( job done, return )

	.connect_points1	( if failed first check ... )
																						( p: row col xS yS xS pxS ) 
	popS popS 					( ...remove unused duplicates )
																						( p: row col xS yS ) 
	.connect_points
	;cposbuf_prevposx ldaS ;cposbuf_prevposy ldaS		( load the previous position )
																						( p: row col xS yS pxS pyS ) 
	#2 ;line jsrS	
jmpSR

( console input interrupt handler )
@convec
	_console/read bsi	
	
	;push_keybuf jsrS
	#1 ;IME sta (re-enable interrupts )
jmpSR

( byte only, range is 0 to max-1 )
@inc_ring ( cur max -- )
	swp #1 add dup rot lst $.skip jnz
	pop #0
	.skip	
jmpSR

@dec_ring ( cur max -- )
	swp #1 sub dupS grt $.skip jnz
	swp #1 sub		
	.skip	
	swp pop
jmpSR

@push_cposbuf ( xS yS -- )

	;cposbuf ;cposbuf_offset lda				( buffer addr to stack and load the cposbuf_offset )
																			( p: xS yS cposbufS cposbuf_offset r: )
	stsC										( copy it to rStack )
																			( p: xS yS cposbufS cposbuf_offset r: cposbuf_offset )
	#20 shi add									( offset cposbuf by cposbuf_offset * 4 to account for two shorts per entry )
																			( p: xS yS cposbufS r: cposbuf_offset )
	swpS ovrS 
																			( p: xS cposbufS yS cposbufS r: cposbuf_offset )
	staS										( store yS at cposBuf )
																			( p: xS cposbufS r: cposbuf_offset )
	#2 add staS									( increment buffer pointer by two and store xS ) 
																			( p: r: cposbuf_offset )

	;cposbuf_max lda 
																			( p: cposbuf_max r: cposbuf_offset )
	stsR ovr									( get offset from rStack and ready for inc_ring call )
																			( p: cposbuf_max cposbuf_offset cposbuf_max r: )
	;inc_ring jsrS								( calculate next offset )
																			( p: cposbuf_max cposbuf_offset r: )
	;cposbuf_offset sta							( store the new offset )
																			( p: cposbuf_max r: )

	( increment counter if less than max )
	;cposbuf_count lda swp 
																			( p: cposbuf_count cposbuf_max r: )
	>= $.skip jnz					( increment counter if count is less than max ) 
	;cposbuf_count lda #1 add
																			( p: cposbuf_count r: )
	;cposbuf_count sta	
																			( p: r: )
	.skip
																			( p: r: )
jmpSR

@pop_cposbuf ( -- xS yS )
	( just return if the buffer is empty )
	;cposbuf_count lda dup #0 equ $.skip jnz
	( reduce count and store it )
	#1 sub ;cposbuf_count sta

	;cposbuf
	;cposbuf_offset lda ;cposbuf_max lda ;dec_ring jsrS
	dup ;cposbuf_offset sta						( store the new offset )
	#20 shi add dupS ldaS swpS					( add offset * 4 to buffer address to account for 2 short per entry to load yS )
	#2 add ldaS 								( load xS )
	swpS
	jmpSR										( return )	
	.skip
	pop											( drop unused count duplicate )
jmpSR

@push_keybuf ( val -- )

	;keybuf ;keybufptr lda stsC ( load the keybuf pointer value and copy to rStack )
	add ( offset keybuf by pointer )
	sta ( store key in keybuf )

	stsR ;keybuf_max lda ;inc_ring jsrS

	;keybufptr sta ( store the incremented pointer )

	( circular buffer maxes out at #20 )
	;keybuf_count lda 
	;keybuf_max lda >= $.skip jnz
	;keybuf_count lda #1 add 
	;keybuf_count sta
	.skip
jmpSR

@pop_keybuf ( -- char )
	;keybuf_count lda dup #0 equ $.skip jnz 
	#1 sub ;keybuf_count sta

	;keybuf 
	( keybufptr points to the next free pos so decrement first )
	;keybufptr lda ;keybuf_max lda ;dec_ring jsrS
	dup ;keybufptr sta 							( store the pointer )
	add 										( offset keybuf by pointer )
	lda											( load the value at the offset onto pStack ) 
	jmpSR
	.skip
	pop
jmpSR

@hfan ( xS yS - )

	( from xS yS )
	#0140 #00F0 ( middle of screen )
	stsS stsS

	.loopstart
	2dupS
	( copy x0S then y0S from rStack )
	ovrSR ovrSR stsSR stsSR
	
	#02 ;line jsrS
	swpS #0003 addS swpS
	ovrS #0280 lstS $.loopstart jnz

	( clean up stacks before returning )
	popS popS
	popSR popSR
jmpSR

@vfan ( xS yS - )

	( from xS yS )
	#0140 #00F0 ( middle of screen )
	stsS stsS

	.loopstart
	2dupS
	( copy x0S then y0S from rStack )
	ovrSR ovrSR stsSR stsSR
	
	#02 ;line jsrS
	#0003 addS 
	dupS #01E0 lstS $.loopstart jnz

	( clean up stacks before returning )
	popS popS
	popSR popSR
jmpSR

@linetest

	( to xS yS )
	#0000 #0000 ;hfan jsrS		( top left )
	#0000 #0000 ;vfan jsrS		( top left )
	#0000 #01DF ;hfan jsrS		( top right )
	#027F #0000 ;vfan jsrS		( top right )
jmpSR

@dugo ( -- )
	( print character 68 to stdout )
	#68 _console/write bso
	( #0101 #0000 #0140 #00F0 #02 ;line jsrS )
(
	  #0005 #0003 #00F7 #00F6 #02 ;line jsrS 
	  #0002 #0003 #0002 #0030 #02 ;line jsrS 
	  #0002 #0003 #0002 #000F #02 ;line jsrS 
)
	;linetest jsrS 
jmpSR

( always subtract the smaller from the bigger )
@deltax ( x0S x1S -- dxS )
	( use the return value of the lstS as a relative offset for the jmp )
	2dupS swpS lstS jmp ( $.skipswap jnz )
	swpS
	( .skipswap )
	subS
jmpSR

@deltay ( y0S y1S -- dyS )
	swpS 2dupS lstS $.skipswap jnz
	swpS
	.skipswap
	subS
jmpSR

( a < b ? 1 : -1 )
@direction	( aS bS -- rS )
	<?S $.retone jnz
	#FFFF jmpSR
	.retone #0001
jmpSR

( Bresenham line drawing algorithm )
@line ( x0S y0S x1S y1S c -- ) 
	
	;line_col sta						( move pixel color to local variable )

	( copy source and destination coords to local variables )
	;line_y1 staS ;line_x1 staS ;line_y0 staS ;line_x0 staS	

																				( p: / r: ... )
	;line_x0 ldaS ;line_x1 ldaS 
																				( p: line_x0S line_x1S / r: ... )
	( sx = x0 < x1 ? 1 : -1 )
	2dupS								( dupe x0 and x1 for direction and deltax )
																				( p: line_x0S line_x1S line_x0S line_x1S / r: ... ) 
	;direction jsrS ;line_sx staS 		( calculate direction for x )
																				( p: line_x0S line_x1S / r: ... ) 
	$deltax jsr							( calculate delta x )
																				( p: dxS / r: ... ) 
	( load y0 and y1 )
	;line_y0 ldaS ;line_y1 ldaS 
																				( p: dxS line_y0S line_y1S / r: ... ) 
	( sy = y0 < y1 ? 1 : -1 )
	2dupS 
																				( p: dxS line_y0S line_y1S line_y0S line_y1S / r: ... ) 
	;direction jsrS ;line_sy staS
																				( p: dxS line_y0S line_y1S / r: ... ) 
	( calculate delta y )
	$deltay jsr
																				( p: dxS dyS / r: ... ) 
	2dupS								( dupe dx and dy for err and for storing ) 
																				( p: dxS dyS / r: ... ) 
	addS								( err = dx + dy ) 
																				( p: dxS dyS errS / r: ... ) 
	swpS  
																				( p: dxS errS dyS / r: ... ) 
	;line_dy staS
																				( p: dxS errS / r: ... ) 
	swpS
																				( p: errS dxS / r: ... ) 
	;line_dx staS	
																				( p: errS / r: ... ) 
	;line_col lda ;line_x0 ldaS ;line_y0 ldaS
																				( p: errS line_col line_x0S line_y0S / r: .. ) 
	( stsSC stsSC ) 	( copy y and x to rStack ) ( copy opcodes are not safe when interrupts can intercede between calls )
	2dupS stsS stsS ( copy y and x to rStack )
																				( p: errS line_col line_x0S line_y0S / r: .. line_y0S line_x0S ) 
	.loop
		setpixel	
																				( p: errS / r: .. line_y0S line_x0S ) 
		( if x == x1 && y == y1 break )
		( TODO: split into two so we only check second part if x == x1. )
		( dupSR popSR ) ( debug fix )
		stsSRC 
																				( p: errS line_x0S / r: .. line_y0S line_x0S ) 
		;line_x1 ldaS 
																				( p: errS line_x0S line_x1S / r: .. line_y0S line_x0S ) 
		equS 							( compare cur x with the dst x )
																				( p: errS bool / r: .. line_y0S line_x0S ) 
		ovrSR stsSR						( move a copy of dst y from rStack to pStack )	
																				( p: errS bool line_y0S / r: .. line_y0S line_x0S ) 
		;line_y1 ldaS 
																				( p: errS bool line_y0S line_y1S / r: .. line_y0S line_x0S ) 
		equS 
																				( p: errS bool bool / r: .. line_y0S line_x0S ) 
		and $.end jnz				( end if cur y = dst y and cur x = dst x )
																				( p: errS / r: .. line_y0S line_x0S ) 
		dupS 
																				( p: errS errS / r: .. line_y0S line_x0S ) 
		#10 shiS  						( err2 = err * 2 )
																				( p: errS err2S / r: .. line_y0S line_x0S ) 
( step x )
		( if err2 >= dy then increment )
		$line_dy ldrS 2dupS 
																				( p: errS err2S line_dyS err2S line_dyS / r: .. line_y0S line_x0S ) 
		<?S $.skip_x jnz
																				( p: errS err2S line_dyS / r: .. line_y0S line_x0S ) 
		rotS addS 						( err += dy )	
																				( p: err2S errS / r: .. line_y0S line_x0S ) 
		stsSR $line_sx ldrS 
																				( p: err2S errS line_x0S line_sxS / r: .. line_y0S ) 
		addS							( x += sx )	
																				( p: err2S errS line_x0S / r: .. line_y0S ) 
		stsS ( put x back on rStack for next iter )
																				( p: err2S errS / r: .. line_y0S line_x0S ) 
		$.ystep jmp

		.skip_x
																				( p: errS err2S line_dyS / r: .. line_y0S line_x0S ) 
		popS				( pop unused line_dyS )
																				( p: errS err2S / r: .. line_y0S line_x0S ) 
		swpS 
																				( p: err2S errS / r: .. line_y0S line_x0S ) 
		.ystep
		( swpS ) 
																				( p: err2S errS / r: .. line_y0S line_x0S ) 
		$line_dx ldrS
																				( p: err2S errS line_dxS / r: .. line_y0S line_x0S ) 
		rotS ovrS 
																				( p: errS line_dxS err2S line_dxS / r: .. line_y0S line_x0S ) 
		( step y )
		>?S $.skip_y jnz 	( if err2 > dx skip y increment )
																				( p: errS line_dxS / r: .. line_y0S line_x0S ) 
		addS ( err += dx )
																				( p: errS / r: .. line_y0S line_x0S ) 
		swpSR stsSR 
																				( p: errS line_y0S / r: .. line_x0S ) 
		;line_sy ldaS 
		addS		( y += sy )
		( if sy is -1 then eventually so will y become -1 )
																				( p: errS line_y0S / r: .. line_x0S ) 
		stsS ( put y back on rStack for next iter )
																				( p: errS / r: .. line_x0S line_y0S ) 
		swpSR					( swap line_y0S line_x0 on rStack ) 
																				( p: errS / r: .. line_y0S line_x0S ) 
		$.loopend jmp
		.skip_y 
																				( p: errS line_dxS / r: .. line_y0S line_x0S ) 
		popS  					( pop unused dx )
																				( p: errS / r: .. line_y0S line_x0S ) 

		( swpSR	) 				( swap line_y0S line_x0 on rStack ) 
		.loopend

		;line_col lda 
																				( p: row col errS line_col / r: .. line_y0S line_x0S ) 
		stsSR stsSR 2dupS stsS stsS
																				( p: row col errS line_col line_x0S line_y0S / r: .. line_y0S line_x0S ) 
		;.loop jmpS

	.end
	popS		( remove the errS )
	popRS popRS ( clean up rStack )
jmpSR
( variables )
@line_col &1 @line_x0 &2 @line_y0 &2 @line_y1 &2 @line_x1 &2
@line_dx &2 @line_dy &2 @line_sx &2 @line_sy &2 

@pointer/xhair
10 10 00 D6 00 10 10 00 
@pointer/clear
00 00 00 00 00 00 00 00
@pointer/x 01 40  	( 640 / 2 )
@pointer/y 00 F0	( 480 / 2 ) 


(chars are at 0x600 + ascii*8 )
^600 @font/monomini
( unprintable ascii from 0x500 to 0x51F )
^700 
00 00 00 00 00 00 00 00 ( space )
00 10 10 10 00 10 00 00 ( ! )
00 12 24 00 00 00 00 00 ( " )
00 28 7C 28 7C 28 00 00 ( # )
00 08 1C 30 0C 38 08 00 ( $ )
00 48 08 10 20 24 00 00 ( % )
00 30 40 34 48 34 00 00 ( & )
00 20 20 00 00 00 00 00 ( ' )
00 10 20 20 20 10 00 00 ( open parens )
00 20 10 10 10 20 00 00 ( close parens )
00 00 28 10 28 00 00 00 ( * )
00 00 10 38 10 00 00 00 ( + )
00 00 00 00 00 10 20 00 ( , )
00 00 00 38 00 00 00 00 ( - )
00 00 00 00 00 10 00 00 ( . )
00 02 04 08 10 20 00 00 ( / )
00 18 24 24 24 18 00 00 ( 0 )
00 18 08 08 08 08 00 00 ( 1 )
00 38 04 18 20 3C 00 00 ( 2 )
00 38 04 18 04 38 00 00 ( 3 )
00 08 18 28 3C 08 00 00 ( 4 )
00 3C 20 38 04 38 00 00 ( 5 )
00 18 20 38 24 18 00 00 ( 6 )
00 3C 04 08 10 10 00 00 ( 7 )
00 18 24 18 24 18 00 00 ( 8 )
00 18 24 1C 04 18 00 00 ( 9 )
00 00 00 10 00 10 00 00 ( : )
00 00 00 10 00 10 20 00 ( ; )
00 08 10 20 10 08 00 00 ( < )
00 00 38 00 38 00 00 00 ( = )
00 20 10 08 10 20 00 00 ( > )
00 38 04 38 00 20 00 00 ( ? )
00 38 44 5C 54 38 00 00 ( @ )
00 18 24 24 3C 24 00 00 ( A )
00 38 24 38 24 38 00 00 ( B )
00 18 20 20 20 18 00 00 ( C )
00 38 24 24 24 38 00 00 ( D )
00 38 20 38 20 38 00 00 ( E )
00 38 20 38 20 20 00 00 ( F )
00 1C 20 2C 24 1C 00 00 ( G )
00 24 24 3C 24 24 00 00 ( H )
00 38 10 10 10 38 00 00 ( I )
00 0C 04 04 24 18 00 00 ( J )
00 24 28 30 28 24 00 00 ( K )
00 20 20 20 20 38 00 00 ( L )
00 22 36 2A 22 22 00 00 ( M )
00 24 34 2C 24 24 00 00 ( N )
00 18 24 24 24 18 00 00 ( O )
00 38 24 24 38 20 00 00 ( P )
00 18 24 24 28 14 00 00 ( Q )
00 3C 24 24 38 24 00 00 ( R )
00 1C 20 18 04 38 00 00 ( S )
00 38 10 10 10 10 00 00 ( T )
00 24 24 24 24 18 00 00 ( U )
00 24 24 24 28 30 00 00 ( V )
00 44 54 54 54 28 00 00 ( W )
00 24 24 18 24 24 00 00 ( X )
00 24 24 3C 04 18 00 00 ( Y )
00 3C 04 18 20 3C 00 00 ( Z )
00 30 20 20 20 30 00 00 ( [ )
00 20 10 08 04 02 00 00 ( \ )
00 30 10 10 10 30 00 00 ( ] )
00 10 28 00 00 00 00 00 ( ^ )
00 00 00 00 00 3C 00 00 ( _ )
00 20 10 00 00 00 00 00 ( ` )
00 00 1C 24 24 1C 00 00 ( a )
00 20 38 24 24 38 00 00 ( b )
00 00 18 20 20 18 00 00 ( c )
00 04 1C 24 24 1C 00 00 ( d )
00 00 18 2C 30 18 00 00 ( e )
00 08 10 38 10 10 00 00 ( f )
00 00 1C 24 24 1C 04 18 ( g )
00 20 20 30 28 28 00 00 ( h )
00 10 00 10 10 10 00 00 ( i )
00 10 00 10 10 10 20 00 ( j )
00 20 20 28 30 28 00 00 ( k )
00 10 10 10 10 08 00 00 ( l )
00 00 3C 2A 2A 2A 00 00 ( m )
00 00 38 24 24 24 00 00 ( n )
00 00 18 24 24 18 00 00 ( o )
00 00 38 24 24 38 20 20 ( p )
00 00 1C 24 24 1C 04 04 ( q )
00 00 28 30 20 20 00 00 ( r )
00 00 1C 30 0C 38 00 00 ( s )
00 10 1C 10 10 08 00 00 ( t )
00 00 24 24 24 1C 00 00 ( u )
00 00 24 24 28 10 00 00 ( v )
00 00 54 54 28 28 00 00 ( w )
00 00 24 18 18 24 00 00 ( x )
00 00 24 24 24 1C 04 18 ( y )
00 00 3C 08 10 3C 00 00 ( z )
00 18 10 20 10 18 00 00 ( { )
00 10 10 10 10 10 00 00 ( | )
00 30 10 08 10 30 00 00 ( } )
00 14 28 00 00 00 00 00 ( ~ )
